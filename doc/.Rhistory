packages.used <- c("R.matlab","readxl", "dplyr", "ggplot2", "caret","pROC","randomForest", "magrittr", "e1071","grid","gridExtra", "ROSE", "DMwR")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used, intersect(installed.packages()[,1], packages.used))
# install additional packages
if(length(packages.needed) > 0){
install.packages(packages.needed, dependencies = TRUE)
}
library(R.matlab)
library(readxl)
library(dplyr)
library(ggplot2)
library(caret)
library(pROC)
library(randomForest)
library(magrittr)
library(e1071)
library(grid)
library(gridExtra)
library(ROSE)
library(DMwR)
set.seed(2020)
train_dir <- "../data/train_set/" #may need to be changed to local directory
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
K <- 5  # number of CV folds
run.fudicial.list <- FALSE
run.feature.train <- FALSE # process features for training set
run.feature.test <- FALSE # process features for test set
run.cv.rf <- FALSE # run cross-validation on the training set for random forest
run.train.rf <- FALSE # run evaluation on entire train set
run.test.rf <- TRUE # run evaluation on an independent test set
hyper_grid_rf <- expand.grid(
ntree = c(200, 500, 800, 1000),
mtry = c(20,50))
info <- read.csv(train_label_path)
train_label_path
info <- read.csv(train_label_path)
hyper_grid_rf <- expand.grid(
ntree = c(200, 500, 800, 1000),
mtry = c(20,50))
n_files <- length(list.files(train_image_dir))
if (run.fudicial.list){
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
fiducial_pt_list <- lapply(1:n_files, readMat.matrix)
save(fiducial_pt_list, file="../output/fiducial_pt_list.RData")
# otherwise load the data stored for convenience
} else {
load(file="../output/fiducial_pt_list.RData")
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
save(dat_train, tm_feature_train, file="../output/feature_train.RData")
}else{
load(file="../output/feature_train.RData")
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
save(dat_test, tm_feature_test, file="../output/feature_test.RData")
}else{
load(file="../output/feature_test.RData")
}
# loading the pca features
source("../output/feature_train_pca.R")
packages.used <- c("R.matlab","readxl", "dplyr", "ggplot2", "caret","pROC","randomForest", "magrittr", "e1071","grid","gridExtra", "ROSE", "DMwR")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used, intersect(installed.packages()[,1], packages.used))
# install additional packages
if(length(packages.needed) > 0){
install.packages(packages.needed, dependencies = TRUE)
}
library(R.matlab)
library(readxl)
library(dplyr)
library(ggplot2)
library(caret)
library(pROC)
library(randomForest)
library(magrittr)
library(e1071)
library(grid)
library(gridExtra)
library(ROSE)
library(DMwR)
set.seed(2020)
train_dir <- "../data/train_set/" #may need to be changed to local directory
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
K <- 5  # number of CV folds
run.fudicial.list <- FALSE
run.feature.train <- FALSE # process features for training set
run.feature.test <- FALSE # process features for test set
run.cv.rf <- FALSE # run cross-validation on the training set for random forest
run.train.rf <- FALSE # run evaluation on entire train set
run.test.rf <- TRUE # run evaluation on an independent test set
hyper_grid_rf <- expand.grid(
ntree = c(200, 500, 800, 1000),
mtry = c(20,50))
n_files <- length(list.files(train_image_dir))
if (run.fudicial.list){
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
fiducial_pt_list <- lapply(1:n_files, readMat.matrix)
save(fiducial_pt_list, file="../output/fiducial_pt_list.RData")
# otherwise load the data stored for convenience
} else {
load(file="../output/fiducial_pt_list.RData")
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
save(dat_train, tm_feature_train, file="../output/feature_train.RData")
}else{
load(file="../output/feature_train.RData")
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
save(dat_test, tm_feature_test, file="../output/feature_test.RData")
}else{
load(file="../output/feature_test.RData")
}
# loading the pca features
source("../output/feature_train_pca.RData")
load("~/Documents/GitHub/Spring2021-Project3-group-8/output/feature_train_pca.RData")
load("~/Documents/GitHub/Spring2021-Project3-group-8/output/feature_test_pca.RData")
View(feature_test_pca)
View(feature_train_pca)
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
save(dat_train, tm_feature_train, file="../output/feature_train.RData")
}else{
load(file="../output/feature_train.RData")
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
save(dat_test, tm_feature_test, file="../output/feature_test.RData")
}else{
load(file="../output/feature_test.RData")
}
# loading the pca features
source("../output/feature_train_pca.RData")
source("../lib/feature_pca.R")
tm_feature_train_pca <- system.time({feature_train_pca = as.matrix(feature_pca(dat_train));
feature_test_pca = as.matrix(feature_pca(dat_test))
})
tm_feature_train_pca
save(feature_train_pca, file="../output/feature_train_pca.RData")
save(feature_test_pca, file="../output/feature_test_pca.RData")
source("../lib/train_rf.R")
source("../lib/test_rf.R")
source("../lib/cross_validation_rf.R")
dim(feature_train_pca)
dim(dat_train)
dim(feature_test_pca)
dim(feature_train_pca)
dat_test[ ,-ncol(dat_test)]
dim(dat_test[ ,-ncol(dat_test)])
packages.used <- c("R.matlab","readxl", "dplyr", "ggplot2", "caret","pROC","randomForest", "magrittr", "e1071","grid","gridExtra", "ROSE", "DMwR")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used, intersect(installed.packages()[,1], packages.used))
# install additional packages
if(length(packages.needed) > 0){
install.packages(packages.needed, dependencies = TRUE)
}
library(R.matlab)
library(readxl)
library(dplyr)
library(ggplot2)
library(caret)
library(pROC)
library(randomForest)
library(magrittr)
library(e1071)
library(grid)
library(gridExtra)
library(ROSE)
library(DMwR)
set.seed(2020)
train_dir <- "../data/train_set/" #may need to be changed to local directory
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
K <- 5  # number of CV folds
run.fudicial.list <- FALSE
run.feature.train <- FALSE # process features for training set
run.feature.test <- FALSE # process features for test set
run.cv.rf <- FALSE # run cross-validation on the training set for random forest
run.train.rf <- FALSE # run evaluation on entire train set
run.test.rf <- TRUE # run evaluation on an independent test set
hyper_grid_rf <- expand.grid(
ntree = c(200, 500, 800, 1000),
mtry = c(20,50))
n_files <- length(list.files(train_image_dir))
if (run.fudicial.list){
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
fiducial_pt_list <- lapply(1:n_files, readMat.matrix)
save(fiducial_pt_list, file="../output/fiducial_pt_list.RData")
# otherwise load the data stored for convenience
} else {
load(file="../output/fiducial_pt_list.RData")
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
save(dat_train, tm_feature_train, file="../output/feature_train.RData")
}else{
load(file="../output/feature_train.RData")
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
save(dat_test, tm_feature_test, file="../output/feature_test.RData")
}else{
load(file="../output/feature_test.RData")
}
source("../lib/feature_pca.R")
View(feature_pca)
tm_feature_train_pca
tm_pca_feature <- system.time({model_pca <- feature_pca(dat_train)})
feature_pca_train <- predict(model_pca, dat[, -6007])
feature_pca_train <- predict(model_pca, dat_train[, -6007])
feature_pca_test <- predict(model_pca, dat_test[, -6007])
dim(feature_pca_train)
dim(feature_pca_test)
save(feature_pca_train, file="../output/feature_pca_train.RData")
save(feature_pca_test, file="../output/feature_pca_test.RData")
load("~/Documents/GitHub/Spring2021-Project3-group-8/output/feature_test_pca.RData")
load("~/Documents/GitHub/Spring2021-Project3-group-8/output/feature_train_pca.RData")
dim(feature_train_pca)
dim(feature_test_pca)
# retrain the data
dim(feature_pca_train)
dim(feature_pca_test)
View(feature_pca)
source("../lib/train_rf.R")
source("../lib/test_rf.R")
source("../lib/cross_validation_rf.R")
View(feature_pca_test)
View(feature_pca_test)
View(feature_pca_test)
feature_train = as.matrix(feature_pca_train)
label_train = dat_train$label
View(feature_train)
View(feature_pca_train)
label_train
res_cv_rf_pca <- matrix(0, nrow = nrow(hyper_grid_rf), ncol = 4)
res_cv_rf_pca
res_cv_rf_pca <- matrix(0, nrow = nrow(hyper_grid_rf), ncol = 4)
for (i in 1:nrow(hyper_grid_rf)){
print(hyper_grid_rf$ntree[i])
print(hyper_grid_rf$mtry[i])
res_cv_rf_pca[i,] <- cv.function_rf(features = feature_train,
labels = label_train,
K,
ntree = hyper_grid_rf$ntree[i],
mtry = hyper_grid_rf$mtry[i])
}
res_cv_rf_pca
save(res_cv_rf_pca, file="../output/res_cv_rf_pca.RData")
res_cv_rf_pca <- as.data.frame(res_cv_rf_pca)
colnames(res_cv_rf_pca) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
p1 <- res_cv_rf_pca %>% mutate(
mean_error_true = 1- mean_error , sd_error_true = sd(mean_error_true))%>%
ggplot(aes(x = as.factor(hyper_grid_rf$ntree), y = mean_error_true,
ymin = mean_error_true - sd_error, ymax = mean_error_true + sd_error )) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Mean Error for RF", y="mean error", x="ntrees")
p2 <- res_cv_rf_pca %>%
ggplot(aes(x = as.factor(hyper_grid_rf$ntree), y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Mean AUC for RF", y="mean AUC", x="ntrees")
grid.arrange(p1, p2, nrow=2)
tree_best_pca <- hyper_grid_rf$ntree[which.max(res_cv_rf_pca$mean_AUC)]
mtry_best_pca <- hyper_grid_rf$mtry[which.max(res_cv_rf_pca$mean_AUC)]
mtry_best_pca
tree_best_pca
tm_train_rf_pca <- system.time(fit_train_rf_pca <- train_rf(feature_train, label_train, ntree = tree_best_pca, mtry = mtry_best_pca))
tm_train_rf_pca
save(fit_train_rf_pca, tm_train_rf_pca, file="../output/fit_train_rf_pca.RData")
tm_test_rf_pca = NA
feature_test <- as.matrix(feature_pca_test)
label_test <- dat_test$label
tm_test_rf_pca <- system.time(label_pred <- as.integer(predict(fit_train_rf_pca, feature_test)))
accu_rf = mean(label_pred == as.integer(label_test))
auc_rf <- roc(label_pred, as.integer(label_test))$auc
cat("The unweighted accuracy of the random forest model is ", accu_rf*100, "%.\n")
cat("The unweighted AUC of the random forest model is ", auc_rf, ".\n")
cat("Time for training random forest model=", tm_train_rf[1], "s \n")
cat("Time for training random forest model=", tm_train_rf_pca[1], "s \n")
cat("Time for testing random forest model=", tm_test_rf_pca[1], "s \n")
