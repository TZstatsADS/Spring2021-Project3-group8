packages.used <- c("R.matlab","readxl", "dplyr", "ggplot2", "caret","pROC","randomForest", "magrittr", "e1071","grid","gridExtra", "ROSE", "DMwR")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used, intersect(installed.packages()[,1], packages.used))
# install additional packages
if(length(packages.needed) > 0){
install.packages(packages.needed, dependencies = TRUE)
}
library(R.matlab)
library(readxl)
library(dplyr)
library(ggplot2)
library(caret)
library(pROC)
library(randomForest)
library(magrittr)
library(e1071)
library(grid)
library(gridExtra)
library(ROSE)
library(DMwR)
set.seed(2020)
train_dir <- "../data/train_set/" #may need to be changed to local directory
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
K <- 5  # number of CV folds
run.fudicial.list <- FALSE
run.feature.train <- FALSE # process features for training set
run.feature.test <- FALSE # process features for test set
run.cv.rf <- FALSE # run cross-validation on the training set for random forest
run.train.rf <- FALSE # run evaluation on entire train set
run.test.rf <- TRUE # run evaluation on an independent test set
hyper_grid_rf <- expand.grid(
ntree = c(200, 500, 800, 1000),
mtry = c(20,50))
info <- read.csv(train_label_path)
train_label_path
info <- read.csv(train_label_path)
hyper_grid_rf <- expand.grid(
ntree = c(200, 500, 800, 1000),
mtry = c(20,50))
n_files <- length(list.files(train_image_dir))
if (run.fudicial.list){
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
fiducial_pt_list <- lapply(1:n_files, readMat.matrix)
save(fiducial_pt_list, file="../output/fiducial_pt_list.RData")
# otherwise load the data stored for convenience
} else {
load(file="../output/fiducial_pt_list.RData")
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
save(dat_train, tm_feature_train, file="../output/feature_train.RData")
}else{
load(file="../output/feature_train.RData")
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
save(dat_test, tm_feature_test, file="../output/feature_test.RData")
}else{
load(file="../output/feature_test.RData")
}
# loading the pca features
source("../output/feature_train_pca.R")
